"use strict";(self.webpackChunkgetdeck=self.webpackChunkgetdeck||[]).push([[541],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),f=i,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||o;return r?n.createElement(m,a(a({ref:t},u),{},{components:r})):n.createElement(m,a({ref:t},u))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6185:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const o={title:"Using Files as a Source",sidebar_position:3,slug:"using-file-as-source"},a=void 0,l={unversionedId:"using-file",id:"using-file",title:"Using Files as a Source",description:"Let's assume you have a valid kubernetes resource defined in a locally acessible file called hello.yaml. How can you include this resoure within our Deckfile?",source:"@site/guides/using-file.md",sourceDirName:".",slug:"/using-file-as-source",permalink:"/guides/using-file-as-source",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Using Files as a Source",sidebar_position:3,slug:"using-file-as-source"},sidebar:"docsSidebar",previous:{title:"Using Inline as a Source",permalink:"/guides/using-inline-as-source"},next:{title:"Using Helm as a Source",permalink:"/guides/using-helm-as-source"}},s={},c=[],u={toc:c};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Let's assume you have a valid kubernetes resource defined in a locally acessible file called ",(0,i.kt)("inlineCode",{parentName:"p"},"hello.yaml"),". How can you include this resoure within our Deckfile?\nSimilar to the inline definition, a new entry under ",(0,i.kt)("inlineCode",{parentName:"p"},"sources")," has to be added within the Deckfile. This time, however, using the ",(0,i.kt)("inlineCode",{parentName:"p"},"type: file"),". In addition, the location of the file has to be provided:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"- type: file\n  ref: ./hello.yaml\n")),(0,i.kt)("p",null,"If required, you can reference to parent or sub-folders, too. The provided paths are always with respect to your Deckfile."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"- type: file\n  ref: ./resources/hello.yaml\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"- type: file\n  ref: ../resources/file/hello.yaml\n")),(0,i.kt)("p",null,"Furthermore, it is possible to reference files by providing absolut paths. As you know, however, absolute paths are prone to break when sharing/moving Deckfiles.\nTherefore, their use may not be recommended."),(0,i.kt)("p",null,"Besides local files, Getdeck supports refering to remote files via http(s) and git. Resources accessible via http(s) can simply be included using the corresponding url:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"- type: file\n  ref: https://.../hello.yaml\n")),(0,i.kt)("p",null,"Resource definitions living in a git repository can be included by referencing to the corresponding repository, in addition with the ",(0,i.kt)("inlineCode",{parentName:"p"},"targetRevision")," (branch) and the ",(0,i.kt)("inlineCode",{parentName:"p"},"path")," of the resource within the repositiony."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"- type: file\n  ref: git@github.com:Getdeck/getdeck.git\n  targetRevision: main\n  path: ./hello.yaml\n")),(0,i.kt)("p",null,"While local and remote file references are certainly very usefull in many situations, larger projects most likely have their resources defined using tool such as Helm and Kustomize - which can also be used with Getdeck."),(0,i.kt)("p",null,"PS: Getdeck does not yet support remote access to protected resources. However, if you require to access protected resources, please feel free to open an issue/discussion/feature request on github."))}p.isMDXComponent=!0}}]);