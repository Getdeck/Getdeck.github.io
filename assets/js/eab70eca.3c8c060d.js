"use strict";(self.webpackChunkgetdeck=self.webpackChunkgetdeck||[]).push([[684],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(n),k=i,u=c["".concat(p,".").concat(k)]||c[k]||m[k]||r;return n?a.createElement(u,o(o({ref:t},s),{},{components:n})):a.createElement(u,o({ref:t},s))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5001:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const r={title:"CLI Reference",sidebar_position:8,description:"This is the reference of the deck CLI"},o=void 0,l={unversionedId:"cli-reference",id:"cli-reference",title:"CLI Reference",description:"This is the reference of the deck CLI",source:"@site/docs/cli-reference.md",sourceDirName:".",slug:"/cli-reference",permalink:"/docs/cli-reference",draft:!1,editUrl:"https://github.com/Getdeck/Getdeck.github.io/tree/main/docs/cli-reference.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"CLI Reference",sidebar_position:8,description:"This is the reference of the deck CLI"},sidebar:"docsSidebar",previous:{title:"Supported Kubernetes Distributions",permalink:"/docs/supported-kubernetes-distributions"},next:{title:"Deckfile Specification",permalink:"/docs/deckfile-specs"}},p={},d=[{value:"Syntax",id:"syntax",level:2},{value:"Actions",id:"actions",level:2},{value:"<code>deck get</code>",id:"deck-get",level:3},{value:"Positional Arguments",id:"positional-arguments",level:4},{value:"Optional Arguments",id:"optional-arguments",level:4},{value:"<code>deck list</code>",id:"deck-list",level:3},{value:"Positional Arguments",id:"positional-arguments-1",level:4},{value:"<code>deck stop</code>",id:"deck-stop",level:3},{value:"Positional Arguments",id:"positional-arguments-2",level:4},{value:"<code>deck remove</code>",id:"deck-remove",level:3},{value:"Positional Arguments",id:"positional-arguments-3",level:4},{value:"Optional Arguments",id:"optional-arguments-1",level:4},{value:"<code>deck hosts</code>",id:"deck-hosts",level:3},{value:"Positional Arguments",id:"positional-arguments-4",level:4},{value:"Optional Arguments",id:"optional-arguments-2",level:4},{value:"<code>deck version</code>",id:"deck-version",level:3}],s={toc:d};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,"Use the following syntax to run ",(0,i.kt)("inlineCode",{parentName:"p"},"deck")," commands from your terminal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"deck [-h] [-d] [action] [arguments]\n")),(0,i.kt)("p",null,"where ",(0,i.kt)("inlineCode",{parentName:"p"},"action")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"arguments")," are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"action"),": specifies the operation that you want to perform, for example ",(0,i.kt)("inlineCode",{parentName:"li"},"get")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"remove")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"arguments"),":  specifies the required and optional arguments for a specific action, for example ",(0,i.kt)("inlineCode",{parentName:"li"},"--name"))),(0,i.kt)("p",null,"Global flags are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-h, --help"),": show help message and exit"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-d, --debug"),": add debug output for each action")),(0,i.kt)("h2",{id:"actions"},"Actions"),(0,i.kt)("p",null,"The CLI allows running the following available actions."),(0,i.kt)("h3",{id:"deck-get"},(0,i.kt)("inlineCode",{parentName:"h3"},"deck get")),(0,i.kt)("p",null,"Create (or reuse) a Kubernetes cluster and install the selected Deck to it. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Deckfile")," parameter\nis the location of ",(0,i.kt)("inlineCode",{parentName:"p"},"deck.yaml")," (or a specific file). It can be a local file system path, ",(0,i.kt)("inlineCode",{parentName:"p"},"http"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"https"),"\nor a ",(0,i.kt)("inlineCode",{parentName:"p"},"git")," repository. If no ",(0,i.kt)("inlineCode",{parentName:"p"},"--name")," is given and there is only one Deck defined in the Deckfile, this one\nis installed. Otherwise ",(0,i.kt)("inlineCode",{parentName:"p"},"--name")," is mandatory."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck get [ARGUMENTS] Deckfile")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck get https://github.com/gefyrahq/gefyra-demos.git")),(0,i.kt)("h4",{id:"positional-arguments"},"Positional Arguments"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Deckfile")," the deck.yaml location (as file, git or https)"),(0,i.kt)("h4",{id:"optional-arguments"},"Optional Arguments"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"--name NAME")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The Deck that you want to run from the Deckfile")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"-I"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"--no-cluster")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Do not set up the cluster, use current kubectl context")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"-W, --wait")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Wait for the Pods of the Deck to become ready")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"-T TIMEOUT, --timeout TIMEOUT")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Timeout (in seconds, default 120) for the Pods of the Deck to become ready; if exceeded the run fails")))),(0,i.kt)("h3",{id:"deck-list"},(0,i.kt)("inlineCode",{parentName:"h3"},"deck list")),(0,i.kt)("p",null,"List the available Decks from a given Deckfile."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck list Deckfile")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck list https://github.com/gefyrahq/gefyra-demos.git")),(0,i.kt)("h4",{id:"positional-arguments-1"},"Positional Arguments"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Deckfile")," the deck.yaml location (as file, git or https)"),(0,i.kt)("h3",{id:"deck-stop"},(0,i.kt)("inlineCode",{parentName:"h3"},"deck stop")),(0,i.kt)("p",null,"Stop a running cluster for a given Deckfile."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck stop Deckfile")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck stop https://github.com/gefyrahq/gefyra-demos.git")),(0,i.kt)("h4",{id:"positional-arguments-2"},"Positional Arguments"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Deckfile")," the deck.yaml location (as file, git or https)"),(0,i.kt)("h3",{id:"deck-remove"},(0,i.kt)("inlineCode",{parentName:"h3"},"deck remove")),(0,i.kt)("p",null,"Remove a Deck from a Kubernetes cluster or remove the entire cluster. If no ",(0,i.kt)("inlineCode",{parentName:"p"},"--name")," is given and\nthere is only one Deck defined in the Deckfile, this one is removed. Otherwise ",(0,i.kt)("inlineCode",{parentName:"p"},"--name")," is mandatory."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck remove [ARGUMENTS] Deckfile")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck remove --cluster https://github.com/gefyrahq/gefyra-demos.git")),(0,i.kt)("h4",{id:"positional-arguments-3"},"Positional Arguments"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Deckfile")," the deck.yaml location (as file, git or https)"),(0,i.kt)("h4",{id:"optional-arguments-1"},"Optional Arguments"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"--name")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The Deck that you want to run from the Deckfile")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"--cluster")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Remove the entire cluster from the local system")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"-I"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"--no-cluster")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Do not set up the cluster, use current kubectl context")))),(0,i.kt)("h3",{id:"deck-hosts"},(0,i.kt)("inlineCode",{parentName:"h3"},"deck hosts")),(0,i.kt)("p",null,"Add the host names from the Deckfile to your local DNS resolve configuration (for example ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/hosts/"),").\nIf no ",(0,i.kt)("inlineCode",{parentName:"p"},"--name")," is given and there is only one Deck defined in the Deckfile, this one is used. Otherwise ",(0,i.kt)("inlineCode",{parentName:"p"},"--name")," is mandatory.\nUse one of the ",(0,i.kt)("inlineCode",{parentName:"p"},"host_action")," options to either list the specified host names, write or remove them. "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck hosts host_action [ARGUMENTS] Deckfile")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck hosts write https://github.com/gefyrahq/gefyra-demos.git")),(0,i.kt)("h4",{id:"positional-arguments-4"},"Positional Arguments"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"host_action")," The action to perform on the local host: valid is ",(0,i.kt)("inlineCode",{parentName:"p"},"write"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"remove"),"  and ",(0,i.kt)("inlineCode",{parentName:"p"},"list"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"Deckfile")," the deck.yaml location (as file, git or https)"),(0,i.kt)("h4",{id:"optional-arguments-2"},"Optional Arguments"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"--name")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The Deck that you want to run from the Deckfile")))),(0,i.kt)("h3",{id:"deck-version"},(0,i.kt)("inlineCode",{parentName:"h3"},"deck version")),(0,i.kt)("p",null,"Print out the current CLI version."))}m.isMDXComponent=!0}}]);