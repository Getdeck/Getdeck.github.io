"use strict";(self.webpackChunkgetdeck=self.webpackChunkgetdeck||[]).push([[841],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),k=d(n),m=r,u=k["".concat(p,".").concat(m)]||k[m]||s[m]||i;return n?a.createElement(u,o(o({ref:t},c),{},{components:n})):a.createElement(u,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=k;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},8373:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return s}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:3},p="CLI Reference",d={unversionedId:"deck/for-devs/cli-reference",id:"deck/for-devs/cli-reference",title:"CLI Reference",description:"Syntax",source:"@site/docs/deck/for-devs/cli-reference.md",sourceDirName:"deck/for-devs",slug:"/deck/for-devs/cli-reference",permalink:"/docs/deck/for-devs/cli-reference",editUrl:"https://github.com/Getdeck/Getdeck.github.io/tree/main/docs/deck/for-devs/cli-reference.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Working with Decks and the CLI",permalink:"/docs/deck/for-devs/working-with-deck"},next:{title:"API Reference",permalink:"/docs/deck/for-devs/api-reference"}},c={},s=[{value:"Syntax",id:"syntax",level:2},{value:"<code>deck get</code>",id:"deck-get",level:2},{value:"Positional arguments",id:"positional-arguments",level:3},{value:"Optional arguments",id:"optional-arguments",level:3},{value:"<code>deck list</code>",id:"deck-list",level:2},{value:"Positional arguments",id:"positional-arguments-1",level:3},{value:"<code>deck stop</code>",id:"deck-stop",level:2},{value:"Positional arguments",id:"positional-arguments-2",level:3},{value:"<code>deck remove</code>",id:"deck-remove",level:2},{value:"Positional arguments",id:"positional-arguments-3",level:3},{value:"Optional arguments",id:"optional-arguments-1",level:3},{value:"<code>deck version</code>",id:"deck-version",level:2}],k={toc:s};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"cli-reference"},"CLI Reference"),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,"Use the following syntax to run ",(0,i.kt)("inlineCode",{parentName:"p"},"deck")," commands from your terminal:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"deck [-h] [-d] [action] [arguments]\n")),(0,i.kt)("p",null,"where ",(0,i.kt)("inlineCode",{parentName:"p"},"action")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"arguments")," are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"action"),": specifies the operation that you want to perform, for example ",(0,i.kt)("inlineCode",{parentName:"li"},"get")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"remove")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"arguments"),":  specifies the required and optional arguments for a specific action, for example ",(0,i.kt)("inlineCode",{parentName:"li"},"--name"))),(0,i.kt)("p",null,"Global flags are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-h, --help"),": show help message and exit"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-d, --debug"),": add debug output for each action")),(0,i.kt)("h1",{id:"actions"},"Actions"),(0,i.kt)("p",null,"The CLI allows to run the following available actions."),(0,i.kt)("h2",{id:"deck-get"},(0,i.kt)("inlineCode",{parentName:"h2"},"deck get")),(0,i.kt)("p",null,"Create (or reuse) a Kubernetes cluster and install the selected deck to it. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Deckfile")," parameter\nis the location of ",(0,i.kt)("inlineCode",{parentName:"p"},"deck.yaml")," (or a specific file). It can be a local file system path, ",(0,i.kt)("inlineCode",{parentName:"p"},"http"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"https"),"\nor a ",(0,i.kt)("inlineCode",{parentName:"p"},"git")," repository. If no ",(0,i.kt)("inlineCode",{parentName:"p"},"--name")," is given and there is only one deck defined in the Deckfile, this one\nis installed. Otherwise ",(0,i.kt)("inlineCode",{parentName:"p"},"--name")," is mandatory."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck get [ARGUMENTS] Deckfile")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck get https://github.com/gefyrahq/gefyra-demos.git")),(0,i.kt)("h3",{id:"positional-arguments"},"Positional arguments"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Deckfile")," the deck.yaml location (as file, git or https)"),(0,i.kt)("h3",{id:"optional-arguments"},"Optional arguments"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"--name NAME")),(0,i.kt)("td",{parentName:"tr",align:"left"},"The deck that you want to run from the Deckfile")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"-I"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"--no-cluster")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Do not set up the cluster, use current kubectl context")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"-W, --wait")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Wait for the Pods of the Deck to become ready")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"-T TIMEOUT, --timeout TIMEOUT")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Timeout (in seconds, default 120) for the Pods of the Deck to become ready; if exceeded the run fails")))),(0,i.kt)("h2",{id:"deck-list"},(0,i.kt)("inlineCode",{parentName:"h2"},"deck list")),(0,i.kt)("p",null,"List the available decks from a given Deckfile."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck list Deckfile")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck list https://github.com/gefyrahq/gefyra-demos.git")),(0,i.kt)("h3",{id:"positional-arguments-1"},"Positional arguments"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Deckfile")," the deck.yaml location (as file, git or https)"),(0,i.kt)("h2",{id:"deck-stop"},(0,i.kt)("inlineCode",{parentName:"h2"},"deck stop")),(0,i.kt)("p",null,"Stop a running cluster for a given Deckfile."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck stop Deckfile")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck stop https://github.com/gefyrahq/gefyra-demos.git")),(0,i.kt)("h3",{id:"positional-arguments-2"},"Positional arguments"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Deckfile")," the deck.yaml location (as file, git or https)"),(0,i.kt)("h2",{id:"deck-remove"},(0,i.kt)("inlineCode",{parentName:"h2"},"deck remove")),(0,i.kt)("p",null,"Remove a deck from a Kubernetes cluster or remove the entire cluster. If no ",(0,i.kt)("inlineCode",{parentName:"p"},"--name")," is given and\nthere is only one deck defined in the Deckfile, this one is removed. Otherwise ",(0,i.kt)("inlineCode",{parentName:"p"},"--name")," is mandatory."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Syntax:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck remove [ARGUMENTS] Deckfile")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," ",(0,i.kt)("inlineCode",{parentName:"p"},"deck remove --cluster https://github.com/gefyrahq/gefyra-demos.git")),(0,i.kt)("h3",{id:"positional-arguments-3"},"Positional arguments"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Deckfile")," the deck.yaml location (as file, git or https)"),(0,i.kt)("h3",{id:"optional-arguments-1"},"Optional arguments"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Argument"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"--name")),(0,i.kt)("td",{parentName:"tr",align:"left"},"the deck that you want to run from the Deckfile")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"--cluster")),(0,i.kt)("td",{parentName:"tr",align:"left"},"remove the entire cluster from the local system")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"-I"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"--no-cluster")),(0,i.kt)("td",{parentName:"tr",align:"left"},"do not set up the cluster, use current kubectl context")))),(0,i.kt)("h2",{id:"deck-version"},(0,i.kt)("inlineCode",{parentName:"h2"},"deck version")),(0,i.kt)("p",null,"Print out the current CLI version."))}m.isMDXComponent=!0}}]);